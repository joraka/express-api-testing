{
	"info": {
		"_postman_id": "8a32e14a-77f3-4c98-afe7-1b30fa98eef4",
		"name": "local express testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10518058",
		"_collection_link": "https://bit-team-9341.postman.co/workspace/BIT~4410a6db-ef5d-4a56-b2f1-0602140ae45e/collection/10518058-8a32e14a-77f3-4c98-afe7-1b30fa98eef4?action=share&source=collection_link&creator=10518058"
	},
	"item": [
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Post /users - add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.collectionVariables.set(\"REQUEST_BODY\", pm.request.body.raw);\r",
									"    pm.collectionVariables.set(\"REQUEST_ID\", responseBody.user.id);\r",
									"\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody).to.have.property(\"user\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.have.property(\"id\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"username\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"email\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"password\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.be.a(\"object\");\r",
									"    pm.expect(responseBody.user.username).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.email).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.password).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(responseBody.message).to.eql(\"User created\", \"Message should be 'User created'\");\r",
									"    pm.expect(responseBody.user.id, \"ID must be at least 1\").to.be.at.least(1);\r",
									"    pm.expect(responseBody.user.username).to.eql(requestBody.username, \"Username should match the request body\");\r",
									"    pm.expect(responseBody.user.email).to.eql(requestBody.email, \"Email should match the request body\");\r",
									"    pm.expect(responseBody.user.password).to.eql(requestBody.password, \"Password should match the request body\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"pass123\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /users - get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.length).to.be.at.least(1);\r",
									"\r",
									"    pm.expect(responseBody[0]).to.have.property(\"id\");\r",
									"    pm.expect(responseBody[0]).to.have.property(\"username\");\r",
									"    pm.expect(responseBody[0]).to.have.property(\"email\");\r",
									"    pm.expect(responseBody[0]).to.have.property(\"password\");\r",
									"\r",
									"    pm.expect(responseBody[0].id).to.be.a(\"number\");\r",
									"    pm.expect(responseBody[0].username).to.be.a(\"string\");\r",
									"    pm.expect(responseBody[0].email).to.be.a(\"string\");\r",
									"    pm.expect(responseBody[0].password).to.be.a(\"string\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /users/:id - get single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const requestBody = JSON.parse(pm.collectionVariables.get(\"REQUEST_BODY\"));\r",
									"    const responseUserId = parseInt(pm.collectionVariables.get(\"REQUEST_ID\"));\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody).to.have.property(\"user\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.have.property(\"id\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"username\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"email\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"password\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.be.a(\"object\");\r",
									"    pm.expect(responseBody.user.username).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.email).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.password).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(responseBody.message).to.eql(\"User found\", \"Message should be 'User found'\");\r",
									"    pm.expect(responseBody.user.id).to.eql(responseUserId);\r",
									"    pm.expect(responseBody.user.username).to.eql(requestBody.username, \"Username should match the request body\");\r",
									"    pm.expect(responseBody.user.email).to.eql(requestBody.email, \"Email should match the request body\");\r",
									"    pm.expect(responseBody.user.password).to.eql(requestBody.password, \"Password should match the request body\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/users/{{REQUEST_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users",
								"{{REQUEST_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put /users/:id - replace user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    const responseUserId = parseInt(pm.collectionVariables.get(\"REQUEST_ID\"));\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody).to.have.property(\"user\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.have.property(\"id\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"username\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"email\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"password\");\r",
									"\r",
									"    pm.expect(responseBody.message).to.eql(\"User updated\", \"Message should be 'User updated'\");\r",
									"    pm.expect(responseBody.user.id).to.eql(responseUserId, \"ID must match requested\");\r",
									"    pm.expect(responseBody.user.username).to.eql(requestBody.username, \"Username should match the request body\");\r",
									"    pm.expect(responseBody.user.email).to.eql(requestBody.email, \"Email should match the request body\");\r",
									"    pm.expect(responseBody.user.password).to.eql(requestBody.password, \"Password should match the request body\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"agsdadsgjgasgd1j5129512\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users/{{REQUEST_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users",
								"{{REQUEST_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put /users/:id - update username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    const responseUserId = parseInt(pm.collectionVariables.get(\"REQUEST_ID\"));\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody).to.have.property(\"user\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.have.property(\"id\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"username\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"email\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"password\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.be.a(\"object\");\r",
									"    pm.expect(responseBody.user.username).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.email).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.password).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(responseBody.message).to.eql(\"User updated\", \"Message should be 'User updated'\");\r",
									"    pm.expect(responseBody.user.id).to.eql(responseUserId, \"ID must match requested\");\r",
									"    pm.expect(responseBody.user.username).to.eql(requestBody.username, \"Username should match the request body\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users/{{REQUEST_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users",
								"{{REQUEST_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put /users/:id - update email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    const responseUserId = parseInt(pm.collectionVariables.get(\"REQUEST_ID\"));\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody).to.have.property(\"user\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.have.property(\"id\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"username\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"email\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"password\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.be.a(\"object\");\r",
									"    pm.expect(responseBody.user.username).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.email).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.password).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(responseBody.message).to.eql(\"User updated\", \"Message should be 'User updated'\");\r",
									"    pm.expect(responseBody.user.id).to.eql(responseUserId, \"ID must match requested\");\r",
									"    pm.expect(responseBody.user.email).to.eql(requestBody.email, \"Email should match the request body\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users/{{REQUEST_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users",
								"{{REQUEST_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put /users/:id - update password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    const responseUserId = parseInt(pm.collectionVariables.get(\"REQUEST_ID\"));\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody).to.have.property(\"user\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.have.property(\"id\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"username\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"email\");\r",
									"    pm.expect(responseBody.user).to.have.property(\"password\");\r",
									"\r",
									"    pm.expect(responseBody.user).to.be.a(\"object\");\r",
									"    pm.expect(responseBody.user.username).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.email).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.user.password).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(responseBody.message).to.eql(\"User updated\", \"Message should be 'User updated'\");\r",
									"    pm.expect(responseBody.user.id).to.eql(responseUserId, \"ID must match requested\");\r",
									"    pm.expect(responseBody.user.password).to.eql(requestBody.password, \"Password should match the request body\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"aaaaaaa4411111\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users/{{REQUEST_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users",
								"{{REQUEST_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete /users/:id - delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user deletion message\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
									"    pm.expect(responseBody.message).to.eql(\"User deleted\", \"Message should be 'User deleted'\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/users/{{REQUEST_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users",
								"{{REQUEST_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Post /users - add invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('Username length must be between 3 and 32')\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"aa\",\r\n    \"password\": \"pass123\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post /users - add invalid username too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('Username length must be between 3 and 32')\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n    \"password\": \"pass123\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post /users - add invalid password only letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('Password must contain at least one letter and one number')\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"pasaaaaas\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post /users - add invalid password only numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('Password must contain at least one letter and one number')\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"1111123\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post /users - no body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('Missing field. Username, email and password are required.')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post /users - only username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('Missing field. Username, email and password are required.')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"bob\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post /users - only password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('Missing field. Username, email and password are required.')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"bob123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post /users - only email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('Missing field. Username, email and password are required.')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"bob@marley.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /users/:id - get invalid id - negative id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('ID invalid or missing');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/users/-1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /users/:id - get invalid id - letters Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('ID invalid or missing');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/users/aaaa",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users",
								"aaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /users/:id - get non existant user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains user information\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"    pm.expect(responseBody.message).to.equal('User not found');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/users/999999999999999999999999999999999",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"users",
								"999999999999999999999999999999999"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:3131",
			"type": "string"
		},
		{
			"key": "REQUEST_ID",
			"value": "",
			"type": "string"
		},
		{
			"key": "REQUEST_BODY",
			"value": "",
			"type": "string"
		}
	]
}